<?php

declare(strict_types=1);

// phpcs:disable
namespace WyriHaximus\Broadcast\Generated;

use Psr\EventDispatcher\ListenerProviderInterface;
use function get_class;

/**
 * This class is generated by wyrihaximus/broadcast and inspired by bmack/kart-composer-plugin
 */
abstract class AbstractListenerProvider implements ListenerProviderInterface
{
    /**
     * @psalm-suppress InvalidConstantAssignmentValue
     * @var array<string, array<array{class: string, method: string, static: bool, async: bool}>>
     */
    private const LISTENERS = ['%s'];

    /**
     * @return iterable<callable>
     */
    final public function getListenersForEvent(object $event): iterable
    {
        $className = get_class($event);
        if (array_key_exists($className, self::LISTENERS)) {
            /** @psalm-suppress EmptyArrayAccess */
            yield from $this->prepareCallable(self::LISTENERS[$className]);
        }

        yield from [];
    }

    /**
     * @param array<array{class: string, method: string, static: bool, async: bool}> $listeners
     *
     * @return iterable<callable>
     */
    abstract protected function prepareCallable(array $listeners): iterable;
}
// phpcs:enable
